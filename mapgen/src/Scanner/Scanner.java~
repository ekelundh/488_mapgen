/* The following code was generated by JFlex 1.6.1 */

/*
 * Seung Hyun Kim
 * Henry Ekelund
 */

/* Mapgen language lexer specification */

package Scanner;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import Parser.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./src/Scanner/maplang.flex</tt>
 */
public class Scanner implements Parser.sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\77\1\100\1\1\16\7\4\0\1\3\1\60"+
    "\1\76\1\0\1\6\1\65\1\61\1\66\1\43\1\44\1\5\1\63"+
    "\1\53\1\64\1\54\1\4\1\10\1\70\1\67\1\74\1\71\1\11"+
    "\1\75\1\72\1\73\1\11\1\51\1\52\1\57\1\55\1\56\2\0"+
    "\1\37\13\6\1\40\1\6\1\41\13\6\1\47\1\12\1\50\1\0"+
    "\1\6\1\0\1\17\1\13\1\23\1\34\1\16\1\31\1\42\1\36"+
    "\1\26\1\6\1\22\1\15\1\27\1\20\1\14\1\30\1\6\1\21"+
    "\1\25\1\24\1\32\1\33\1\35\3\6\1\45\1\62\1\46\1\0"+
    "\6\7\1\101\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0"+
    "\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6"+
    "\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6"+
    "\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6"+
    "\5\0\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6"+
    "\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"+
    "\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6"+
    "\1\0\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0"+
    "\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7"+
    "\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0"+
    "\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6"+
    "\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6"+
    "\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0"+
    "\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"+
    "\103\6\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0"+
    "\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7"+
    "\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0"+
    "\21\7\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6"+
    "\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0"+
    "\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7"+
    "\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0"+
    "\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6"+
    "\1\7\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\77"+
    "\1\77\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7"+
    "\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7"+
    "\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0"+
    "\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0"+
    "\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7"+
    "\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6"+
    "\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0"+
    "\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6"+
    "\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7"+
    "\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0"+
    "\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6"+
    "\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0"+
    "\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6"+
    "\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0"+
    "\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0"+
    "\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0"+
    "\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0"+
    "\61\6\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0"+
    "\10\6\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0"+
    "\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0"+
    "\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7"+
    "\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0"+
    "\3\7\4\0\1\7\40\0\35\6\203\0\66\6\12\0\26\6\12\0"+
    "\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7\20\0"+
    "\3\7\55\6\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0"+
    "\3\7\44\6\16\7\1\0\12\7\100\0\3\7\60\6\16\7\4\6"+
    "\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6\221\0"+
    "\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\7"+
    "\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7\2\0"+
    "\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0"+
    "\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0"+
    "\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0"+
    "\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0"+
    "\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6\1\0"+
    "\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0"+
    "\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0"+
    "\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0"+
    "\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\15\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\1\1\25"+
    "\1\26\1\27\1\30\1\1\2\31\1\1\1\2\1\0"+
    "\1\32\1\33\7\5\1\34\7\5\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\0\1\45\1\46"+
    "\11\47\1\0\6\5\1\50\1\51\6\5\1\0\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\2\5"+
    "\1\62\2\5\1\63\1\5\1\64\4\5\1\0\1\5"+
    "\1\65\1\66\1\5\1\67\1\70\3\5\1\0\1\5"+
    "\1\71\1\72\2\5\1\0\1\73\2\5\1\0\2\5"+
    "\1\0\1\5\1\74\1\0\1\75\1\0\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\204\0\u0108\0\u014a\0\u018c"+
    "\0\204\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a"+
    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\204"+
    "\0\204\0\204\0\204\0\204\0\204\0\204\0\204\0\204"+
    "\0\204\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\204\0\u07bc\0\u07fe\0\204\0\u0840\0\u0882"+
    "\0\u08c4\0\204\0\204\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e"+
    "\0\u0a50\0\u0a92\0\u018c\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\204\0\204\0\204\0\204\0\204\0\204"+
    "\0\204\0\204\0\u0ca2\0\204\0\204\0\204\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36"+
    "\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u018c\0\u018c\0\u10c2"+
    "\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\204\0\204"+
    "\0\204\0\204\0\204\0\204\0\204\0\204\0\u1290\0\u12d2"+
    "\0\u018c\0\u1314\0\u1356\0\u018c\0\u1398\0\u018c\0\u13da\0\u141c"+
    "\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u018c\0\u018c\0\u1566\0\u018c"+
    "\0\u018c\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u018c\0\u018c"+
    "\0\u16f2\0\u1734\0\u1776\0\u018c\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u1902\0\u1944\0\u018c\0\u1986\0\u018c\0\u19c8\0\204";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\3\1\13\2\10\1\14\1\15\1\10\1\16"+
    "\2\10\1\17\1\10\1\20\1\21\1\10\1\22\1\10"+
    "\1\23\1\10\1\24\1\10\1\25\1\26\1\10\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\7\12\2\3\1\5\1\3"+
    "\1\54\1\55\1\56\7\54\1\57\53\54\1\3\13\54"+
    "\104\0\1\5\103\0\1\60\1\61\47\0\1\62\101\0"+
    "\1\63\32\0\4\10\1\0\30\10\24\0\7\10\3\0"+
    "\1\10\10\0\2\12\55\0\7\12\12\0\4\10\1\0"+
    "\1\10\1\64\4\10\1\65\21\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\2\10\1\66\25\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\10\10\1\67"+
    "\17\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\3\10\1\70\24\10\24\0\7\10\3\0\1\10\6\0"+
    "\4\10\1\0\6\10\1\71\21\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\5\10\1\72\10\10\1\73"+
    "\11\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\4\10\1\74\23\10\24\0\7\10\3\0\1\10\6\0"+
    "\4\10\1\0\4\10\1\75\23\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\1\10\1\76\26\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\23\10\1\77"+
    "\4\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\10\10\1\100\17\10\24\0\7\10\3\0\1\10\6\0"+
    "\4\10\1\0\4\10\1\101\23\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\3\10\1\102\24\10\24\0"+
    "\7\10\3\0\1\10\55\0\1\103\101\0\1\104\101\0"+
    "\1\105\101\0\1\106\105\0\1\107\102\0\1\110\74\0"+
    "\1\111\101\0\1\112\11\0\1\113\67\0\1\114\112\0"+
    "\1\115\15\0\1\56\77\0\1\116\2\0\7\116\1\117"+
    "\1\120\4\116\1\121\1\122\2\116\1\123\4\116\1\124"+
    "\34\116\1\125\7\116\1\126\3\0\1\60\1\4\1\5"+
    "\77\60\5\61\1\127\74\61\6\0\4\10\1\0\1\10"+
    "\1\130\26\10\24\0\7\10\3\0\1\10\6\0\4\10"+
    "\1\0\3\10\1\131\24\10\24\0\7\10\3\0\1\10"+
    "\6\0\4\10\1\0\12\10\1\132\15\10\24\0\7\10"+
    "\3\0\1\10\6\0\4\10\1\0\11\10\1\133\16\10"+
    "\24\0\7\10\3\0\1\10\6\0\4\10\1\0\11\10"+
    "\1\134\16\10\24\0\7\10\3\0\1\10\6\0\4\10"+
    "\1\0\17\10\1\135\10\10\24\0\7\10\3\0\1\10"+
    "\6\0\4\10\1\0\11\10\1\136\16\10\24\0\7\10"+
    "\3\0\1\10\6\0\4\10\1\0\15\10\1\137\12\10"+
    "\24\0\7\10\3\0\1\10\6\0\4\10\1\0\2\10"+
    "\1\140\25\10\24\0\7\10\3\0\1\10\6\0\4\10"+
    "\1\0\13\10\1\141\14\10\24\0\7\10\3\0\1\10"+
    "\6\0\4\10\1\0\13\10\1\142\14\10\24\0\7\10"+
    "\3\0\1\10\6\0\4\10\1\0\11\10\1\143\16\10"+
    "\24\0\7\10\3\0\1\10\6\0\4\10\1\0\15\10"+
    "\1\144\12\10\24\0\7\10\3\0\1\10\6\0\4\10"+
    "\1\0\5\10\1\145\22\10\24\0\7\10\3\0\1\10"+
    "\70\0\1\146\77\0\1\147\101\0\1\150\101\0\1\151"+
    "\101\0\1\152\101\0\1\153\101\0\1\154\101\0\1\155"+
    "\101\0\1\156\13\0\4\61\1\5\1\127\74\61\6\0"+
    "\4\10\1\0\2\10\1\157\25\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\4\10\1\160\23\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\3\10\1\161"+
    "\24\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\1\10\1\162\26\10\24\0\7\10\3\0\1\10\6\0"+
    "\4\10\1\0\17\10\1\163\10\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\3\10\1\164\24\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\12\10\1\165"+
    "\15\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\21\10\1\166\6\10\24\0\7\10\3\0\1\10\6\0"+
    "\4\10\1\0\2\10\1\167\25\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\1\10\1\170\26\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\26\10\1\171"+
    "\1\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\3\10\1\172\24\10\24\0\7\10\3\0\1\10\71\0"+
    "\1\173\16\0\4\10\1\0\3\10\1\174\24\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\7\10\1\175"+
    "\20\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\6\10\1\176\21\10\24\0\7\10\3\0\1\10\6\0"+
    "\4\10\1\0\6\10\1\177\21\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\3\10\1\200\24\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\3\10\1\201"+
    "\24\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\6\10\1\202\21\10\24\0\7\10\3\0\1\10\6\0"+
    "\4\10\1\0\15\10\1\203\12\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\6\10\1\204\21\10\24\0"+
    "\7\10\3\0\1\10\72\0\1\205\15\0\4\10\1\0"+
    "\4\10\1\206\23\10\24\0\7\10\3\0\1\10\6\0"+
    "\4\10\1\0\5\10\1\207\22\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\12\10\1\210\15\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\11\10\1\211"+
    "\16\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\4\10\1\212\23\10\24\0\7\10\3\0\1\10\71\0"+
    "\1\213\16\0\4\10\1\0\5\10\1\214\22\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\13\10\1\215"+
    "\14\10\24\0\7\10\3\0\1\10\6\0\4\10\1\0"+
    "\11\10\1\216\16\10\24\0\7\10\3\0\1\10\73\0"+
    "\1\217\14\0\4\10\1\0\1\10\1\220\26\10\24\0"+
    "\7\10\3\0\1\10\6\0\4\10\1\0\1\10\1\221"+
    "\26\10\24\0\7\10\3\0\1\10\74\0\1\222\13\0"+
    "\4\10\1\0\5\10\1\223\22\10\24\0\7\10\3\0"+
    "\1\10\6\0\4\10\1\0\6\10\1\224\21\10\24\0"+
    "\7\10\3\0\1\10\75\0\1\225\12\0\4\10\1\0"+
    "\12\10\1\226\15\10\24\0\7\10\3\0\1\10\71\0"+
    "\1\227\103\0\1\230\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6666];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\3\1\1\11\16\1\12\11"+
    "\11\1\1\11\2\1\1\11\2\1\1\0\2\11\17\1"+
    "\10\11\1\0\3\11\10\1\1\0\16\1\1\0\10\11"+
    "\14\1\1\0\11\1\1\0\5\1\1\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();
    ComplexSymbolFactory symbolFactory;
    public Scanner(java.io.Reader in, ComplexSymbolFactory sf){
        this(in);
        symbolFactory = sf;
    }

    private Symbol symbol(String name, int sym) {
        return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,yychar),
        new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
    }

    private Symbol symbol(String name, int sym, Object val) {
        Location left = new Location(yyline+1,yycolumn+1,yychar);
        Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
        return symbolFactory.newSymbol(name, sym, left, right,val);
    }
    private Symbol symbol(String name, int sym, Object val,int buflength) {
        Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
        Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
        return symbolFactory.newSymbol(name, sym, left, right,val);
    }
        private void error(String message) {
        System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2882) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol("", EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 63: break;
          case 2: 
            { /* ignore */
            }
          case 64: break;
          case 3: 
            { return symbol("div", DIV);
            }
          case 65: break;
          case 4: 
            { return symbol("mult", MULT);
            }
          case 66: break;
          case 5: 
            { return symbol("identifier", IDENTIFIER, yytext());
            }
          case 67: break;
          case 6: 
            { return symbol("intlit", INTEGER_LITERAL, new Integer(yytext()));
            }
          case 68: break;
          case 7: 
            { return symbol("lparen", LPAREN);
            }
          case 69: break;
          case 8: 
            { return symbol("rparen", RPAREN);
            }
          case 70: break;
          case 9: 
            { return symbol("lbrace", LBRACE);
            }
          case 71: break;
          case 10: 
            { return symbol("rbrace", RBRACE);
            }
          case 72: break;
          case 11: 
            { return symbol("lbrack", LBRACK);
            }
          case 73: break;
          case 12: 
            { return symbol("rbrack", RBRACK);
            }
          case 74: break;
          case 13: 
            { return symbol("colon", COLON);
            }
          case 75: break;
          case 14: 
            { return symbol("semicolon", SEMICOLON);
            }
          case 76: break;
          case 15: 
            { return symbol("comma", COMMA);
            }
          case 77: break;
          case 16: 
            { return symbol("dot", DOT);
            }
          case 78: break;
          case 17: 
            { return symbol("eq", EQ);
            }
          case 79: break;
          case 18: 
            { return symbol("gt", GT);
            }
          case 80: break;
          case 19: 
            { return symbol("lt", LT);
            }
          case 81: break;
          case 20: 
            { return symbol("not", NOT);
            }
          case 82: break;
          case 21: 
            { return symbol("plus", PLUS);
            }
          case 83: break;
          case 22: 
            { return symbol("minus", MINUS);
            }
          case 84: break;
          case 23: 
            { return symbol("mod", MOD);
            }
          case 85: break;
          case 24: 
            { yybegin(CHARLITERAL);
            }
          case 86: break;
          case 25: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 87: break;
          case 26: 
            { return symbol("diveq", DIVEQ);
            }
          case 88: break;
          case 27: 
            { return symbol("multeq", MULTEQ);
            }
          case 89: break;
          case 28: 
            { return symbol("if", IF);
            }
          case 90: break;
          case 29: 
            { return symbol("eqeq", EQEQ);
            }
          case 91: break;
          case 30: 
            { return symbol("gteq", GTEQ);
            }
          case 92: break;
          case 31: 
            { return symbol("ltea", LTEQ);
            }
          case 93: break;
          case 32: 
            { return symbol("noteq", NOTEQ);
            }
          case 94: break;
          case 33: 
            { return symbol("andand", ANDAND);
            }
          case 95: break;
          case 34: 
            { return symbol("oror", OROR);
            }
          case 96: break;
          case 35: 
            { return symbol("pluseq", PLUSEQ);
            }
          case 97: break;
          case 36: 
            { return symbol("minuseq", MINUSEQ);
            }
          case 98: break;
          case 37: 
            { return symbol("modeq", MODEQ);
            }
          case 99: break;
          case 38: 
            { yybegin(YYINITIAL); return symbol("charlit", CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 100: break;
          case 39: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 101: break;
          case 40: 
            { return symbol("int", INT);
            }
          case 102: break;
          case 41: 
            { return symbol("map", MAP);
            }
          case 103: break;
          case 42: 
            { yybegin(YYINITIAL); return symbol("backslash", CHARACTER_LITERAL, '\\');
            }
          case 104: break;
          case 43: 
            { yybegin(YYINITIAL); return symbol("backspace", CHARACTER_LITERAL, '\b');
            }
          case 105: break;
          case 44: 
            { yybegin(YYINITIAL); return symbol("newline", CHARACTER_LITERAL, '\n');
            }
          case 106: break;
          case 45: 
            { yybegin(YYINITIAL); return symbol("carriagereturn", CHARACTER_LITERAL, '\r');
            }
          case 107: break;
          case 46: 
            { yybegin(YYINITIAL); return symbol("tab", CHARACTER_LITERAL, '\t');
            }
          case 108: break;
          case 47: 
            { yybegin(YYINITIAL); return symbol("formfeed", CHARACTER_LITERAL, '\f');
            }
          case 109: break;
          case 48: 
            { yybegin(YYINITIAL); return symbol("singlequote", CHARACTER_LITERAL, '\'');
            }
          case 110: break;
          case 49: 
            { yybegin(YYINITIAL); return symbol("doublequote", CHARACTER_LITERAL, '\"');
            }
          case 111: break;
          case 50: 
            { return symbol("else", ELSE);
            }
          case 112: break;
          case 51: 
            { return symbol("true", BOOLEAN_LITERAL, true);
            }
          case 113: break;
          case 52: 
            { return symbol("void", VOID);
            }
          case 114: break;
          case 53: 
            { return symbol("break", BREAK);
            }
          case 115: break;
          case 54: 
            { return symbol("actor", ACTOR);
            }
          case 116: break;
          case 55: 
            { return symbol("false", BOOLEAN_LITERAL, false);
            }
          case 117: break;
          case 56: 
            { return symbol("while", WHILE);
            }
          case 118: break;
          case 57: 
            { return symbol("return", RETURN);
            }
          case 119: break;
          case 58: 
            { return symbol("actorsdecl", ACTORSDECL);
            }
          case 120: break;
          case 59: 
            { return symbol("boolean", BOOLEAN);
            }
          case 121: break;
          case 60: 
            { return symbol("generator", GENERATOR);
            }
          case 122: break;
          case 61: 
            { return symbol("mapoptions", MAPOPTIONSDECL);
            }
          case 123: break;
          case 62: 
            { return symbol("intlit", INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            }
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
